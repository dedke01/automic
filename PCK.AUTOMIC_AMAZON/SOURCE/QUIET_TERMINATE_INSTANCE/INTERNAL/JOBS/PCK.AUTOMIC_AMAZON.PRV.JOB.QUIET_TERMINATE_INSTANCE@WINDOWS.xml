<?xml version="1.0" encoding="UTF-8"?>
<jobs>
   <metadata>
      <row>
         <version>12.3.3</version>
      </row>
   </metadata>
   <general_attributes>
      <row>
         <minimum_ae_version>11.2</minimum_ae_version>
         <auto_deactivation>F</auto_deactivation>
         <child_flags>00000000000000000000000000000000</child_flags>
         <deactivation_condition>ANY_OK</deactivation_condition>
         <platform>WINDOWS</platform>
         <last_runtimes>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</last_runtimes>
         <max_parallel_action>1</max_parallel_action>
         <mrt_time>000000</mrt_time>
         <name>PCK.AUTOMIC_AMAZON.PRV.JOB.QUIET_TERMINATE_INSTANCE@WINDOWS</name>
         <type>JOBS</type>
         <inherit_output_filter>N</inherit_output_filter>
         <queue>CLIENT_QUEUE</queue>
         <versioning_id>-693035870</versioning_id>
      </row>
   </general_attributes>
   <scripts>
      <row>
         <process><![CDATA[:INCLUDE PCK.ITPA_SHARED.PUB.INCLUDE.POWERSHELL_UTILITY
:INCLUDE PCK.ITPA_SHARED.PUB.INCLUDE.ATTACH
:INCLUDE PCK.AUTOMIC_AMAZON.PRV.INCLUDE.CHECK_ENVIRONMENT@WINDOWS
:INCLUDE PCK.AUTOMIC_AMAZON.PRV.INCLUDE.CHECK_COMMON_OPTIONS
:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHANGE_DIRECTORY_TO_AGENT_BIN

Write-Host "`nChecking exist instance &UC4RB_AWS_INSTANCE_ID#..."
$output = java -jar "&$AGENT_RESOURCES_CLIENT#/itpa-tool.jar" arb -cmd execute $env:EC2_HOME\bin\ec2-describe-instances.cmd &UC4RB_AWS_COMMON_OPTIONS# &UC4RB_AWS_INSTANCE_ID#

$not_found = $output | select-string -pattern ^Client.InvalidInstanceID.NotFound -caseSensitive
$instance = $output | select-string -pattern ^INSTANCE`ti- -caseSensitive

! Instance not found
if ([bool]($not_found)) {
  Write-Host "Instance &UC4RB_AWS_INSTANCE_ID# does not exist!"
  exit 0
}

if (![bool]($instance)) {
  Write-Host "Failed to check instance exist."
  $error_message = [string]::join("`n", $output)
  Write-Host $error_message
  exit 1
}

Write-Host $instance

$split = $instance.tostring().split("`t")
$state = $split[5]
if ($state -eq "terminated") {
  Write-Host "Instance is terminated already!"
  exit 0
}
Write-Host "`nChecking exist instance &UC4RB_AWS_INSTANCE_ID# finished!"

Write-Host "`nDescribe instance &UC4RB_AWS_INSTANCE_ID# address..."
:SET &UC4RB_ADDRESS_FILTER# = '--filter \`"instance-id=&UC4RB_AWS_INSTANCE_ID#\`" '

$eipalloc=""
$eipassoc=""
$output = java -jar "&$AGENT_RESOURCES_CLIENT#/itpa-tool.jar" arb -cmd execute $env:EC2_HOME\bin\ec2-describe-addresses.cmd &UC4RB_AWS_COMMON_OPTIONS# &UC4RB_ADDRESS_FILTER#
$output = $output | findstr /v "itpa-tool Version: Date: GmbH" | Out-String
$output = $output.Trim()

if (!$output) {
  Write-Host "No address allocated for this account or matched the instance!"
}

[string]::join("`n", $output)
$addresses = $output | select-string -pattern ^ADDRESS -caseSensitive

if (![bool]($addresses)) {
  Write-Host "Failed to describe addresses."
  $error_message = [string]::join("`n", $output)
  Write-Host $error_message
}

$split =""
if ([bool]($addresses)) {
  $split = $addresses.tostring().split("`t")
}
$eipalloc = $split[4]
if (![bool]($eipalloc)) {
  Write-Host "No address allocated for instance!"
  Write-Host $addresses
}

$eipassoc = $split[5]
if (![bool]($eipassoc)) {
  Write-Host "No address associated for instance!"
  Write-Host $addresses
}
Write-Host "`nDescribe instance &UC4RB_AWS_INSTANCE_ID# address finished!"

if ([bool]($eipassoc)) {
  Write-Host "`nDisassociating instance &UC4RB_AWS_INSTANCE_ID# address..."
  $output = java -jar "&$AGENT_RESOURCES_CLIENT#/itpa-tool.jar" arb -cmd execute $env:EC2_HOME\bin\ec2-disassociate-address.cmd &UC4RB_AWS_COMMON_OPTIONS# -a $eipassoc
  $result = $output | select-string -pattern ^ADDRESS -caseSensitive

  if (![bool]($result)) {
    Write-Host "Failed to disassociate address $eipassoc"
    $error_message = [string]::join("`n", $output)
    Write-Host $error_message
  }
  Write-Host $result
  Write-Host "`nDisassociating instance &UC4RB_AWS_INSTANCE_ID# address finished!"
}

if ([bool]($eipalloc)) {
  Write-Host "`nReleasing instance &UC4RB_AWS_INSTANCE_ID# address..."
  $output = java -jar "&$AGENT_RESOURCES_CLIENT#/itpa-tool.jar" arb -cmd execute $env:EC2_HOME\bin\ec2-release-address.cmd &UC4RB_AWS_COMMON_OPTIONS# -a $eipalloc
  $result = $output | select-string -pattern ^ADDRESS -caseSensitive

  if (![bool]($result)) {
    Write-Host "Failed to release address $eipalloc"
    $error_message = [string]::join("`n", $output)
    Write-Host $error_message
  }
  Write-Host $result
  Write-Host "`nReleasing instance &UC4RB_AWS_INSTANCE_ID# address finished!"
}

Write-Host "`nTerminating instance &UC4RB_AWS_INSTANCE_ID#..."
$output = java -jar "&$AGENT_RESOURCES_CLIENT#/itpa-tool.jar" arb -cmd execute $env:EC2_HOME\bin\ec2-terminate-instances.cmd &UC4RB_AWS_COMMON_OPTIONS# &UC4RB_AWS_INSTANCE_ID#
$result = $output | select-string -pattern ^INSTANCE`ti- -caseSensitive

if (![bool]($result)) {
  Write-Host "Failed to terminate instance."
  $error_message = [string]::join("`n", $output)
  Write-Host $error_message
  exit 1
}
Write-Host $result
Write-Host "`nTerminating instance &UC4RB_AWS_INSTANCE_ID# finished!"
:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS]]></process>
      </row>
      <row>
         <pre_process>:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.PREPARE_JOB</pre_process>
      </row>
   </scripts>
   <job_attributes>
      <row>
         <platform>WINDOWS</platform>
         <agent><![CDATA[<WIN>]]></agent>
         <job_report_path>2</job_report_path>
         <win_work_dir>c:\</win_work_dir>
         <win_typ>2</win_typ>
         <win_view>0</win_view>
         <win_logon_as_batch>0</win_logon_as_batch>
         <win_show_at_desktop>0</win_show_at_desktop>
         <win_report_by_script>0</win_report_by_script>
         <job_object></job_object>
         <win_cmd></win_cmd>
      </row>
   </job_attributes>
   <rollback_definitions>
      <row>
      </row>
   </rollback_definitions>
</jobs>
